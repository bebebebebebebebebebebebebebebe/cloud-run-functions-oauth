name: CI

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main
      - dev

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --frozen

      - name: Run ruff check and fix
        run: |
          uv run ruff check --fix --unsafe-fixes
          uv run ruff format

      - name: Check for changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "Code formatting changes detected. Please run 'uv run ruff check --fix && uv run ruff format' locally and commit the changes."
            git diff
            exit 1
          fi

  build:
    needs: lint-and-format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-
            ${{ runner.os }}-docker-${{ github.ref }}
            ${{ runner.os }}-docker-main

      - name: Copy test environment file
        run: |
          cp .env.test .env

      - name: Build Docker Image
        run: |
          docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache \
          --load \
          -f Dockerfile.oauth-server \
          -t oauth-server-app:latest .

      - name: Start Container
        run: |
          docker run -d --name oauth-server-app-container -p 8000:8000 oauth-server-app:latest

      - name: Verify Docker Image
        run: docker ps

      - name: Run Tests in Container
        run: |
          # コンテナ内でテストを実行
          docker exec oauth-server-app-container sh -c "
            # アプリケーションの起動を待機
            until curl -s http://localhost:8000 > /dev/null; do
              echo 'アプリケーションの起動を待機中...'
              sleep 1
            done

            uv run pytest -s
          "

      - name: Stop and Remove Container
        run: |
          docker stop oauth-server-app-container
          docker rm oauth-server-app-container
